# ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Activate Python Virtual Environment ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á env\Scripts\activate ‡∏Å‡πà‡∏≠‡∏ô
import streamlit as st
import sqlite3
from PIL import Image
import random

class Database:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self.cursor = self.conn.cursor()

    def execute_query(self, query):
        self.cursor.execute(query)
        return self.cursor.fetchall()

    def close_connection(self):
        self.conn.close()

class StreamlitApp:
    def __init__(self):
        self.food_app = FoodApp()
        self.database = Database('database.db')

    def local_css(self, file_name):
        with open(file_name) as f:
            style = f.read()
        st.markdown(f"<style>{style}</style>", unsafe_allow_html=True)

    def run(self):
        st.set_page_config(
            page_title="‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏¥‡∏ô‡πÑ‡∏£‡∏î‡∏µ?",
            page_icon="üçî",
            layout="wide",
            initial_sidebar_state="expanded",
        )
        self.local_css("styles.css")
        self.food_app.run()

class FoodApp:

    def run(self):
        self.nutritional_food_page()

    def nutritional_food_page(self):
        st.markdown('<div class="subheader2">üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£</div>', unsafe_allow_html=True)
        st.markdown('<div class="subheader3">üíô ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>', unsafe_allow_html=True)
        food_type = st.radio("| ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£", ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô"], key='nutritional_radio')
        if food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß":
            category = "savory"
        elif food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô":
            category = "dessert"
        kcal = st.number_input("| ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà (kcal)", min_value=0)
        protein = st.number_input("| ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà (g)", min_value=0)
        fat = st.number_input("| ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà (g)", min_value=0)
        carbohydrate = st.number_input("| ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà (g)", min_value=0)
        button = st.button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
        st.markdown(
        """<style>
            div[class*="stNumberInput"] label p {
            font-size: 25px;
            margin-bottom: 10px;
            color: #0D1282;
            font-family: 'Kanit', sans-serif;
        }</style>""", unsafe_allow_html=True)
        if button:
            self.show_nutritional_food_page(category, kcal, protein, fat, carbohydrate)

    def load_food_data(self, category):
        self.database = Database('database.db')
        query = f"SELECT id, name, kcal, protein, fat, carbohydrate FROM {category};"
        return self.database.execute_query(query)
    
    def show_nutritional_food_page(self, category, kcal, protein, fat, carbohydrate):
        food_data = self.load_food_data(category)
        filtered_food_data = []
        for food_id, food_name, kcal_db, protein_db, fat_db, carbohydrate_db in food_data:
            if (
                (kcal is None or kcal_db >= kcal)
                and (protein is None or protein_db >= protein)
                and (fat is None or fat_db >= fat)
                and (carbohydrate is None or carbohydrate_db >= carbohydrate)
            ):
                filtered_food_data.append((food_id, food_name))

        if len(filtered_food_data) == 0:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö")
        else:
            col1, col2, col3 = st.columns(3)

            for index, (food_id, food_name) in enumerate(filtered_food_data):
                if index % 3 == 0:
                    with col1:
                        st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                        self.show_image_and_nutrition(food_id, food_name, category)
                elif index % 3 == 1:
                    with col2:
                        st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                        self.show_image_and_nutrition(food_id, food_name, category)
                else:
                    with col3:
                        st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                        self.show_image_and_nutrition(food_id, food_name, category)

    def show_nutritional_food_page(self, category, kcal, protein, fat, carbohydrate):
        food_data = self.load_food_data(category)
        filtered_food_data = []
        for food_id, food_name, kcal_db, protein_db, fat_db, carbohydrate_db in food_data:
            if (
                (kcal is None or kcal_db >= kcal)
                and (protein is None or protein_db >= protein)
                and (fat is None or fat_db >= fat)
                and (carbohydrate is None or carbohydrate_db >= carbohydrate)
            ):
                filtered_food_data.append((food_id, food_name))

        if len(filtered_food_data) == 0:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö")
        else:
            col1, col2, col3 = st.columns(3)

            for index, (food_id, food_name) in enumerate(filtered_food_data):
                if index % 3 == 0:
                    with col1:
                        st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                        self.show_image_and_nutrition(food_id, food_name, category)
                elif index % 3 == 1:
                    with col2:
                        st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                        self.show_image_and_nutrition(food_id, food_name, category)
                else:
                    with col3:
                        st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                        self.show_image_and_nutrition(food_id, food_name, category)   

    def show_image_and_nutrition(self, food_id, food_name, category):
        image_path = f'images/{category}_images/{food_id}.jpg'

        try:
            img = self.resize_image(image_path)
            new_image = img.resize((2000, 1900))
            st.image(new_image, caption=None, use_column_width=False, width=300)
            
            food_data = self.load_food_data(category)
            for id, name, kcal, protein, fat, carbohydrate in food_data:
                if id == food_id:
                    self.show_nutrition_info(kcal, protein, fat, carbohydrate)
                    break

        except FileNotFoundError:
            st.warning(f'‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {food_name}')

    def resize_image(self, image_path, size=(1920, 1080)):
        original_image = Image.open(image_path)
        resized_image = original_image.resize(size)
        return resized_image
    
    def show_nutrition_info(self, kcal, protein, fat, carbohydrate):
        st.markdown(f'<div class="calorie">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô (kcal) : {kcal}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="protein">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (g) : {protein}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="fat">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (g) : {fat}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="carbohydrate">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï (g) : {carbohydrate}</div>', unsafe_allow_html=True)

streamlit_app = StreamlitApp()
streamlit_app.run()