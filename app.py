# ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Activate Python Virtual Environment ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á env\Scripts\activate ‡∏Å‡πà‡∏≠‡∏ô
# pip freeze > requirements.txt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
import streamlit as st
import sqlite3
from PIL import Image
import random

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Streamlit
st.set_page_config(
    page_title="‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏¥‡∏ô‡πÑ‡∏£‡∏î‡∏µ?",
    page_icon="üçî",
    layout="wide",
    initial_sidebar_state="expanded",
)

def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

class Database:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self.cursor = self.conn.cursor()

    def execute_query(self, query):
        self.cursor.execute(query)
        return self.cursor.fetchall()

    def close_connection(self):
        self.conn.close()

local_css("style.css")

class FoodApp:
    def __init__(self):
        self.selected_page = None
        self.categories = ["‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£", "‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£"]
        self.database = Database('database.db')

    def run(self):
        self.selected_page = st.sidebar.selectbox("‡πÑ‡∏õ‡∏¢‡∏±‡∏á", self.categories)

        if self.selected_page == "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å":
            self.home_page()
        elif self.selected_page == "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            self.search_recipe_page()
        elif self.selected_page == "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£":
            self.nutritional_recipe_page()
        elif self.selected_page == "‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£":
            self.random_recipe_page()

    def load_food_data(self, category):
        query = f"SELECT id, name, kcal, protein, fat, carbohydrate FROM {category};"
        return self.database.execute_query(query)

    def load_food_data_with_nutrition(self, category):
        return self.load_food_data(category)

    def show_image_and_nutrition(self, food_id, food_name, category):
        image_path = f'images/{category}_images/{food_id}.jpg'

        try:
            img = Image.open(image_path)
            st.image(img, caption=None, use_column_width=False , width=200)
            food_data = self.load_food_data(category)
            for id, name, kcal, protein, fat, carbohydrate in food_data:
                if id == food_id:
                    st.write(f'**‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô (kcal):** {kcal}')
                    st.write(f'**‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (g):** {protein}')
                    st.write(f'**‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (g):** {fat}')
                    st.write(f'**‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï (g):** {carbohydrate}')
                    break       

        except FileNotFoundError:
            st.warning(f'‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {food_name}')

    def show_savory_page(self):
        st.title('‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß')
        savory_data = self.load_food_data_with_nutrition('savory')
        for food_id, food_name, _, _, _, _ in savory_data:
            st.write(food_name)
            self.show_image_and_nutrition(food_id, food_name, 'savory')

    def show_dessert_page(self):
        st.title('‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô')
        sweet_data = self.load_food_data_with_nutrition('dessert')
        for food_id, food_name, _, _, _, _ in sweet_data:
            st.write(food_name)
            self.show_image_and_nutrition(food_id, food_name, 'dessert')

    def show_nutritional_food_page(self, category, kcal, protein, fat, carbohydrate):
        food_data = self.load_food_data(category)

        if kcal is None or protein is None or fat is None or carbohydrate is None:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        else:
            filtered_food_data = []
            for food_id, food_name, kcal_db, protein_db, fat_db, carbohydrate_db in food_data:
                if (
                    (kcal is None or kcal_db >= kcal)
                    and (protein is None or protein_db >= protein)
                    and (fat is None or fat_db >= fat)
                    and (carbohydrate is None or carbohydrate_db >= carbohydrate)
                ):
                    filtered_food_data.append((food_id, food_name))

            if len(filtered_food_data) == 0:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
            else:
                for food_id, food_name in filtered_food_data:
                    st.write(food_name)
                    self.show_image_and_nutrition(food_id, food_name, category)

    def show_random_food(self, category):
        st.title("‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏°‡∏∑‡∏≠‡∏ô‡∏µ‡πâ ‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠!!!")

        food_data = self.load_food_data_with_nutrition(category)

        random_food = random.choice(food_data)

        food_id, food_name, _, _, _, _ = random_food
        st.header((food_name))

        self.show_image_and_nutrition(food_id, food_name, category)

    def home_page(self):
        st.markdown('<div class="home">‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</div>', unsafe_allow_html=True)
        st.markdown('<div class="header">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤</div>', unsafe_allow_html=True)
        st.markdown('<div class="subheader">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ :</div>', unsafe_allow_html=True)
        st.markdown('<div class="passage">‡πÄ‡∏Ñ‡∏¢‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏≤‡∏Å‡πá‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏î‡∏¥‡∏° ‡πÜ ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡πÉ‡∏ä‡πà‡∏°‡∏±‡πâ‡∏¢‡∏•‡πà‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö</div>', unsafe_allow_html=True)
        st.markdown('<div class="subheader">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</div>', unsafe_allow_html=True)
        st.markdown('<div class="passage">‡∏û‡∏ß‡∏Å‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÄ‡∏ô‡πâ‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏î‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏Ñ‡∏£‡∏±‡∏ö</div>', unsafe_allow_html=True)
        st.markdown('<div class="subheader">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</div>', unsafe_allow_html=True)
        st.markdown('<div class="passage">1. ‡∏ô‡∏≤‡∏¢‡∏õ‡∏†‡∏û ‡∏Å‡∏¥‡∏ï‡∏ï‡∏¥‡∏†‡∏¥‡∏ç‡πÇ‡∏ç‡∏ä‡∏±‡∏¢ (6634438223)</div>', unsafe_allow_html=True)
        st.markdown('<div class="passage">2. ‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏≤‡∏ô‡∏ô‡∏ï‡πå ‡πÇ‡∏™‡∏†‡∏≤‡πÄ‡∏à‡∏£‡∏¥‡∏ç (6634406123)</div>', unsafe_allow_html=True)
        st.markdown('<div class="passage">3. ‡∏ô‡∏≤‡∏¢‡∏Å‡∏µ‡∏£‡∏ï‡∏¥ ‡πÅ‡∏Å‡πâ‡∏ß‡πÇ‡∏ô‡∏ô‡∏ï‡∏∏‡πà‡∏ô (6634405523)</div>', unsafe_allow_html=True)

    def search_recipe_page(self):
        st.title("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
        food_type = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£", ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô"])
        if food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß":
            if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"):
                self.show_savory_page()

        elif food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô":
            if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"):
                self.show_dessert_page()

    def nutritional_recipe_page(self):
        st.title("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
        food_type = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£", ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô"])
        if food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß":
            category = "savory"
        elif food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô":
            category = "dessert"

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        kcal = st.number_input("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ (kcal)", min_value=0)
        protein = st.number_input("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ (g)", min_value=0)
        fat = st.number_input("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ (g)", min_value=0)
        carbohydrate = st.number_input("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ (g)", min_value=0)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        button = st.button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

        if button:
            self.show_nutritional_food_page(category, kcal, protein, fat, carbohydrate)

    def random_recipe_page(self):
        st.title("‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
        st.title("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
        food_type = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£", ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô"])
        if food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß":
            if st.button("‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π"):
                self.show_random_food('savory')
        elif food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô":
            if st.button("‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π"):
                self.show_random_food('dessert')

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á FoodApp ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å run method
food_app = FoodApp()
food_app.run()