# ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Activate Python Virtual Environment ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á env\Scripts\activate ‡∏Å‡πà‡∏≠‡∏ô
import streamlit as st
import sqlite3
from PIL import Image
import random

class Database:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self.cursor = self.conn.cursor()

    def execute_query(self, query):
        self.cursor.execute(query)
        return self.cursor.fetchall()

    def close_connection(self):
        self.conn.close()

class StreamlitApp:
    def __init__(self):
        self.food_app = FoodApp()
        self.database = Database('database.db')

    def local_css(self, file_name):
        with open(file_name) as f:
            style = f.read()
        st.markdown(f"<style>{style}</style>", unsafe_allow_html=True)

    def run(self):
        st.set_page_config(
            page_title="‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏¥‡∏ô‡πÑ‡∏£‡∏î‡∏µ?",
            page_icon="üçî",
            layout="wide",
            initial_sidebar_state="expanded",
        )
        self.local_css("styles.css")
        self.food_app.run()

class FoodApp:
    def __init__(self):
        self.selected_page = None
        self.categories = ["üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "ü•ó ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£", "üé≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£"]
        self.database = Database('database.db')
    
    def run(self):
        self.selected_page = st.sidebar.selectbox("‡πÑ‡∏õ‡∏¢‡∏±‡∏á : ", self.categories)

        if self.selected_page == "üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å":
            self.home_page()
        elif self.selected_page == "üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            self.search_food_page()
        elif self.selected_page == "ü•ó ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£":
            self.nutritional_food_page()
        elif self.selected_page == "üé≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£":
            self.random_food_page()

    def load_food_data(self, category):
        query = f"SELECT id, name, kcal, protein, fat, carbohydrate FROM {category};"
        return self.database.execute_query(query)
    
    def load_food_data_with_nutrition(self, category):
        return self.load_food_data(category)
    
    def resize_image(self, image_path, size=(1920, 1080)):
        original_image = Image.open(image_path)
        resized_image = original_image.resize(size)
        return resized_image
    
    def show_nutrition_info(self, kcal, protein, fat, carbohydrate):
        st.markdown(f'<div class="calorie">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô (kcal) : {kcal}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="protein">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (g) : {protein}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="fat">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (g) : {fat}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="carbohydrate">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï (g) : {carbohydrate}</div>', unsafe_allow_html=True)

    def show_image_and_nutrition(self, food_id, food_name, category):
        image_path = f'images/{category}_images/{food_id}.jpg'

        try:
            img = self.resize_image(image_path)
            new_image = img.resize((2000, 1900))
            st.image(new_image, caption=None, use_column_width=False, width=300)
            
            food_data = self.load_food_data(category)
            for id, name, kcal, protein, fat, carbohydrate in food_data:
                if id == food_id:
                    self.show_nutrition_info(kcal, protein, fat, carbohydrate)
                    break

        except FileNotFoundError:
            st.warning(f'‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {food_name}')

    def show_food_page(self, title, category):
        st.markdown(f'<div class="subheader">| {title}</div>', unsafe_allow_html=True)
        food_data = self.load_food_data_with_nutrition(category)

        col1, col2, col3 = st.columns(3)

        for index, (food_id, food_name, _, _, _, _) in enumerate(food_data):
            if index % 3 == 0:
                with col1:
                    st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                    self.show_image_and_nutrition(food_id, food_name, category)
            elif index % 3 == 1:
                with col2:
                    st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                    self.show_image_and_nutrition(food_id, food_name, category)
            else:
                with col3:
                    st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                    self.show_image_and_nutrition(food_id, food_name, category)

    def show_savory_page(self):
        self.show_food_page('‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß', 'savory')

    def show_dessert_page(self):
        self.show_food_page('‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô', 'dessert')

    def show_nutritional_food_page(self, category, kcal, protein, fat, carbohydrate):
        food_data = self.load_food_data(category)
        filtered_food_data = []
        for food_id, food_name, kcal_db, protein_db, fat_db, carbohydrate_db in food_data:
            if (
                (kcal is None or kcal_db >= kcal)
                and (protein is None or protein_db >= protein)
                and (fat is None or fat_db >= fat)
                and (carbohydrate is None or carbohydrate_db >= carbohydrate)
            ):
                filtered_food_data.append((food_id, food_name))

        if len(filtered_food_data) == 0:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö")
        else:
            col1, col2, col3 = st.columns(3)

            for index, (food_id, food_name) in enumerate(filtered_food_data):
                if index % 3 == 0:
                    with col1:
                        st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                        self.show_image_and_nutrition(food_id, food_name, category)
                elif index % 3 == 1:
                    with col2:
                        st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                        self.show_image_and_nutrition(food_id, food_name, category)
                else:
                    with col3:
                        st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                        self.show_image_and_nutrition(food_id, food_name, category)

    def show_random_food(self, category):
        st.markdown('<div class="header">‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ ‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ !!!</div>', unsafe_allow_html=True)
        food_data = self.load_food_data_with_nutrition(category)
        if len(food_data) == 0:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö")
        else:
            col1, col2, col3 = st.columns(3)
            random_food_indexes = random.sample(range(len(food_data)), min(3, len(food_data)))
            for index, food_index in enumerate(random_food_indexes):
                food_id, food_name, *_ = food_data[food_index]
                if index % 3 == 0:
                    with col1:
                        st.markdown(f'<div class="menu_topic">{food_name}</div>', unsafe_allow_html=True)
                        self.show_image_and_nutrition(food_id, food_name, category)

    def home_page(self):
        st.markdown('<div class="home">üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</div>', unsafe_allow_html=True)
        st.markdown('<div class="header">üçî ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤</div>', unsafe_allow_html=True)
        st.markdown('<div class="subheader">| ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤</div>', unsafe_allow_html=True)
        st.markdown('<div class="passage">‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏£‡∏≤‡∏ö‡∏ñ‡∏∂‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π‡∏°‡∏µ‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏û‡∏ß‡∏Å‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏±‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö</div>', unsafe_allow_html=True)
        st.markdown('<div class="subheader">| ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</div>', unsafe_allow_html=True)
        st.markdown('<div class="passage">‡∏û‡∏ß‡∏Å‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÄ‡∏ô‡πâ‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏î‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏Ñ‡∏£‡∏±‡∏ö</div>', unsafe_allow_html=True)
        st.markdown('<div class="subheader">| ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</div>', unsafe_allow_html=True)
        st.markdown('<div class="passage">1. ‡∏ô‡∏≤‡∏¢‡∏õ‡∏†‡∏û ‡∏Å‡∏¥‡∏ï‡∏ï‡∏¥‡∏†‡∏¥‡∏ç‡πÇ‡∏ç‡∏ä‡∏±‡∏¢ (6634438223)</div>', unsafe_allow_html=True)
        st.markdown('<div class="passage">2. ‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏≤‡∏ô‡∏ô‡∏ï‡πå ‡πÇ‡∏™‡∏†‡∏≤‡πÄ‡∏à‡∏£‡∏¥‡∏ç (6634406123)</div>', unsafe_allow_html=True)
        st.markdown('<div class="passage">3. ‡∏ô‡∏≤‡∏¢‡∏Å‡∏µ‡∏£‡∏ï‡∏¥ ‡πÅ‡∏Å‡πâ‡∏ß‡πÇ‡∏ô‡∏ô‡∏ï‡∏∏‡πà‡∏ô (6634405523)</div>', unsafe_allow_html=True)
        st.markdown('<div class="subheader">| ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>', unsafe_allow_html=True)
        st.markdown('<div class="passage"><a href="https://nutrition2.anamai.moph.go.th/th/thai-food-composition-table">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ 2561 NUTRITIVE VALUES OF THAI FOODS</a>', unsafe_allow_html=True)

    def search_food_page(self):
        st.markdown('<div class="subheader2">üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>', unsafe_allow_html=True)
        st.markdown('<div class="subheader3">üíô ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>', unsafe_allow_html=True)
        food_type = st.radio("| ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£ : ", ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô"])
        if food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß":
            if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"):
                self.show_savory_page()

        elif food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô":
            if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"):
                self.show_dessert_page()

    def nutritional_food_page(self):
        st.markdown('<div class="subheader2">üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£</div>', unsafe_allow_html=True)
        st.markdown('<div class="subheader3">üíô ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>', unsafe_allow_html=True)
        food_type = st.radio("| ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£", ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô"], key='nutritional_radio')
        if food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß":
            category = "savory"
        elif food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô":
            category = "dessert"
        kcal = st.number_input("| ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà (kcal)", min_value=0)
        protein = st.number_input("| ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà (g)", min_value=0)
        fat = st.number_input("| ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà (g)", min_value=0)
        carbohydrate = st.number_input("| ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà (g)", min_value=0)
        button = st.button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
        st.markdown(
        """<style>
            div[class*="stNumberInput"] label p {
            font-size: 25px;
            margin-bottom: 10px;
            color: #0D1282;
            font-family: 'Kanit', sans-serif;
        }</style>""", unsafe_allow_html=True)
        if button:
            self.show_nutritional_food_page(category, kcal, protein, fat, carbohydrate)

    def random_food_page(self):
        st.markdown('<div class="subheader2">üîé ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>', unsafe_allow_html=True)
        st.markdown('<div class="subheader3">üíô ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>', unsafe_allow_html=True)
        food_type = st.radio("| ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£ :", ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô"])
        if food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß":
            if st.button("‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π"):
                self.show_random_food('savory')
        elif food_type == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô":
            if st.button("‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π"):
                self.show_random_food('dessert')
            
streamlit_app = StreamlitApp()
streamlit_app.run()